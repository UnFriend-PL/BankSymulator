// <auto-generated />
using System;
using BankSymulatorApi.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankSymulatorApi.Migrations
{
    [DbContext(typeof(BankDbContext))]
    partial class BankDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankSymulatorApi.Models.Account", b =>
                {
                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaveAccount")
                        .HasColumnType("bit");

                    b.Property<string>("JointOwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("isClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("isJointAccount")
                        .HasColumnType("bit");

                    b.HasKey("AccountNumber");

                    b.HasAlternateKey("AccountId");

                    b.HasIndex("JointOwnerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BankSymulatorApi.Models.Application", b =>
                {
                    b.Property<string>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApproverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("InquirerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NoExpirationDate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReceiveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("ApproverId");

                    b.HasIndex("InquirerId");

                    b.ToTable("Application");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Application");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BankSymulatorApi.Models.Contributor", b =>
                {
                    b.Property<string>("ContributorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContributorId");

                    b.HasIndex("AccountNumber");

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("BankSymulatorApi.Models.Deposit", b =>
                {
                    b.Property<string>("DepositId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<float>("BalanceAfterOperation")
                        .HasColumnType("real");

                    b.Property<string>("ContributorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepositTime")
                        .HasColumnType("datetime2");

                    b.HasKey("DepositId");

                    b.HasIndex("AccountNumber");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("BankSymulatorApi.Models.Transfer", b =>
                {
                    b.Property<string>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("BalanceAfterOperationFromAccount")
                        .HasColumnType("real");

                    b.Property<float>("BalanceAfterOperationToAccount")
                        .HasColumnType("real");

                    b.Property<string>("FromAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("SourceCurrencyTransferAmount")
                        .HasColumnType("real");

                    b.Property<string>("ToAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("TransferAmount")
                        .HasColumnType("real");

                    b.Property<float>("TransferFee")
                        .HasColumnType("real");

                    b.Property<DateTime>("TransferTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransferType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransferId");

                    b.HasIndex("FromAccountNumber");

                    b.HasIndex("ToAccountNumber");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("BankSymulatorApi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BankSymulatorApi.Models.Withdraw", b =>
                {
                    b.Property<string>("WithdrawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<float>("BalanceAfterOperation")
                        .HasColumnType("real");

                    b.Property<DateTime>("WithdrawTime")
                        .HasColumnType("datetime2");

                    b.HasKey("WithdrawId");

                    b.HasIndex("AccountNumber");

                    b.ToTable("Withdraws");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BankSymulatorApi.Models.JointAccountApplication", b =>
                {
                    b.HasBaseType("BankSymulatorApi.Models.Application");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JointApproverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("JointInquirerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("JointApproverId");

                    b.HasIndex("JointInquirerId");

                    b.HasDiscriminator().HasValue("JointAccountApplication");
                });

            modelBuilder.Entity("BankSymulatorApi.Models.Account", b =>
                {
                    b.HasOne("BankSymulatorApi.Models.User", "JointOwner")
                        .WithMany("JointOwnedAccounts")
                        .HasForeignKey("JointOwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BankSymulatorApi.Models.User", "Owner")
                        .WithMany("Accounts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JointOwner");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BankSymulatorApi.Models.Application", b =>
                {
                    b.HasOne("BankSymulatorApi.Models.User", "Approver")
                        .WithMany("ApproverApplications")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankSymulatorApi.Models.User", "Inquirer")
                        .WithMany("InquirerApplications")
                        .HasForeignKey("InquirerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Inquirer");
                });

            modelBuilder.Entity("BankSymulatorApi.Models.Contributor", b =>
                {
                    b.HasOne("BankSymulatorApi.Models.Account", "Account")
                        .WithMany("Contrubitors")
                        .HasForeignKey("AccountNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BankSymulatorApi.Models.Deposit", b =>
                {
                    b.HasOne("BankSymulatorApi.Models.Account", "Account")
                        .WithMany("Deposits")
                        .HasForeignKey("AccountNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BankSymulatorApi.Models.Transfer", b =>
                {
                    b.HasOne("BankSymulatorApi.Models.Account", "FromAccount")
                        .WithMany("FromTransfers")
                        .HasForeignKey("FromAccountNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BankSymulatorApi.Models.Account", "ToAccount")
                        .WithMany("ToTransfers")
                        .HasForeignKey("ToAccountNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");
                });

            modelBuilder.Entity("BankSymulatorApi.Models.Withdraw", b =>
                {
                    b.HasOne("BankSymulatorApi.Models.Account", "Account")
                        .WithMany("Withdraws")
                        .HasForeignKey("AccountNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BankSymulatorApi.Models.JointAccountApplication", b =>
                {
                    b.HasOne("BankSymulatorApi.Models.User", "JointApprover")
                        .WithMany("JointApproverApplications")
                        .HasForeignKey("JointApproverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BankSymulatorApi.Models.User", "JointInquirer")
                        .WithMany("JointInquirerApplications")
                        .HasForeignKey("JointInquirerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JointApprover");

                    b.Navigation("JointInquirer");
                });

            modelBuilder.Entity("BankSymulatorApi.Models.Account", b =>
                {
                    b.Navigation("Contrubitors");

                    b.Navigation("Deposits");

                    b.Navigation("FromTransfers");

                    b.Navigation("ToTransfers");

                    b.Navigation("Withdraws");
                });

            modelBuilder.Entity("BankSymulatorApi.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("ApproverApplications");

                    b.Navigation("InquirerApplications");

                    b.Navigation("JointApproverApplications");

                    b.Navigation("JointInquirerApplications");

                    b.Navigation("JointOwnedAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
